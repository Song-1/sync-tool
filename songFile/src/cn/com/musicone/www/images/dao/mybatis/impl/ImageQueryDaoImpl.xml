<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="cn.com.musicone.www.images.dao.mybatis.ImageQueryDao">
	
	<insert id="logImageData" parameterType="ImageModel" useGeneratedKeys="true" keyProperty="id">
		insert into ct_sys_images(md5_value,aliyun_key,file_size,create_date,bak_int)
		values
		(#{md5},#{img}, #{size},now(),#{status})
	</insert>
	
	<update id="updateImage" parameterType="ImageModel">
		update ct_sys_images image set image.bak_int = #{status},image.remark = #{md5} where image.id = #{id}
	</update>
	
	<select id="queryImages" resultType="ImageModel">
		select  image.id as id ,
				image.aliyun_key as img
		from ct_sys_images image
		where image.bak_int = 7
		limit 0,100
	</select>
	
	<!--  专辑图片查询  -->
	<select id="queryAlbumImages" resultType="ImageModel">
		select album.image as img ,album.icon  from ct_album album
	</select>
	<!--  歌手 图片查询  -->
	<select id="querySingerImages" resultType="ImageModel">
		select singer.image_key as img from ct_singer_image singer
	</select>
	<!--   banner 图片查询  -->
	<select id="queryBannerImages" resultType="ImageModel">
		select banner.img from ct_banner banner
	</select>
	<!--  书籍 图片查询  -->
	<select id="queryBookImages" resultType="ImageModel">
		select book.cover as img from ct_book book
	</select>
	<!--  歌单环境标签 图片查询  -->
	<select id="queryEnvironmentImages" resultType="ImageModel">
		select ens.img ,ens.icon from ct_environment ens
	</select>
	<!-- 歌单 图片查询 -->
	<select id="querySonglistImages" resultType="ImageModel">
		select songlist.img ,songlist.icon from t_songlist songlist
	</select>
	<!--专辑风格 图片查询-->
	<select id="queryStyleImages" resultType="ImageModel">
		select style.image as img, style.icon from ct_style style
	</select>
	
	<select id="listSongs" resultType="SongModel">
	select
		tsong.id as id,
		tsong.singer as singer
	from
		t_song tsong
	where
		tsong.singer is not null
	</select>
	
	<update id="updateSongs" parameterType="SongModel">
		update t_song tsong set tsong.singer_name = #{remark} ,tsong.state = #{status} where tsong.id = #{id}
	</update>
	
	<select id="listSongSingerName" resultType="String">
		select
			t.singer_name
		from
			(
				select distinct
					(tsong.singer) as singer_name
				from
					t_song tsong
				where
					tsong.singer is not null
			) as t
		where
			not exists (
				select
					singer.singer_id
				from
					ct_singer_name singer
				where
					singer.singer_name = t.singer_name
			)
	</select>

</mapper>